import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ValidationResult {
  isValid: boolean;
  score: number; // 0-100
  violations: string[];
  warnings: string[];
  recommendation: string;
  analysisDetails: {
    contentAlignment: boolean;
    visualIntegrity: boolean;
    islamicCompliance: boolean;
    modesty: boolean;
    imageQuality: boolean;
    textQuality: boolean;
    violenceCheck: boolean;
    politicalContent: boolean;
    misinformation: boolean;
    copyright: boolean;
    disgusting: boolean;
    facebookPolicy: boolean;
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { imageUrl, postContent = "", context = "" } = await req.json();
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not found in environment variables');
    }

    if (!imageUrl) {
      throw new Error('Image URL is required');
    }

    console.log(`üîç Validating image: ${imageUrl}`);
    console.log(`üìù Post content: ${postContent.substring(0, 100)}...`);

    // Convert image URL to base64 (fixed for large images)
    let imageData: string;
    let imageMimeType: string;
    
    try {
      const imageResponse = await fetch(imageUrl);
      if (!imageResponse.ok) {
        throw new Error(`Failed to fetch image: ${imageResponse.status}`);
      }
      
      const imageBuffer = await imageResponse.arrayBuffer();
      
      // Convert to base64 without stack overflow
      const uint8Array = new Uint8Array(imageBuffer);
      let binary = '';
      const chunkSize = 0x8000; // 32KB chunks
      for (let i = 0; i < uint8Array.length; i += chunkSize) {
        binary += String.fromCharCode(...uint8Array.subarray(i, i + chunkSize));
      }
      const base64Image = btoa(binary);
      
      imageMimeType = imageResponse.headers.get('content-type') || 'image/jpeg';
      if (!imageMimeType.startsWith('image/')) {
        imageMimeType = 'image/jpeg';
      }
      
      imageData = base64Image;
      console.log(`‚úÖ Image processed: ${imageMimeType}, size: ${imageBuffer.byteLength} bytes`);
    } catch (error) {
      console.error('‚ùå Error processing image:', error);
      throw new Error(`Failed to process image: ${error.message}`);
    }

    // Comprehensive validation prompt with STRICT Arabic text checking
    const validationPrompt = `ÿ£ŸÜÿ™ ÿÆÿ®Ÿäÿ± ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ŸÅÿ≠ÿµ Ÿàÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿµŸàÿ± ŸÇÿ®ŸÑ ÿßŸÑŸÜÿ¥ÿ± ÿπŸÑŸâ ŸÅŸäÿ≥ÿ®ŸàŸÉ. ŸÇŸÖ ÿ®ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑŸÖÿ±ŸÅŸÇÿ© ÿ®ÿØŸÇÿ© ÿπÿßŸÑŸäÿ© ÿ¨ÿØÿßŸã Ÿàÿµÿ±ÿßŸÖÿ© ÿ¥ÿØŸäÿØÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑŸÖÿπÿßŸäŸäÿ± ÿßŸÑÿ™ÿßŸÑŸäÿ©:

ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖŸÜÿ¥Ÿàÿ± ÿßŸÑŸÖÿ±ŸÅŸÇ: "${postContent}"
ÿßŸÑÿ≥ŸäÿßŸÇ: "${context}"

ŸÖÿπÿßŸäŸäÿ± ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿµÿßÿ±ŸÖÿ© ŸàÿßŸÑŸÖÿ¥ÿØÿØÿ©:

üî¥ **ŸÅÿ≠ÿµ ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© - ÿ±ŸÅÿ∂ ŸÅŸàÿ±Ÿä ŸÑŸÑÿ£ÿÆÿ∑ÿßÿ°** üî¥
- ÿßÿ±ŸÅÿ∂ ÿ£Ÿä ÿµŸàÿ±ÿ© ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ÿπÿ±ÿ®Ÿäÿ© ŸÖÿ¥ŸàŸáÿ© ÿ£Ÿà ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ© ŸÖÿ´ŸÑ "ÿ£ŸÑŸÇŸáŸàÿ¢" ÿ£Ÿà "ÿπŸäÿ∂ÿØÿ±ÿßŸÖÿ±ÿ∂ÿØ"
- ÿßÿ±ŸÅÿ∂ ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ŸÑÿß ŸÖÿπŸÜŸâ ŸÑŸáÿß ÿ£Ÿà ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ© ŸÅŸä ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
- ÿßÿ±ŸÅÿ∂ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿ•ŸÖŸÑÿßÿ¶Ÿäÿ© ÿßŸÑŸÅÿßÿØÿ≠ÿ© ŸàÿßŸÑŸàÿßÿ∂ÿ≠ÿ©
- ÿßÿ±ŸÅÿ∂ ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿØŸÖÿ¨ÿ© ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿÆÿßÿ∑ÿ¶ÿ© ÿ£Ÿà ÿßŸÑŸÖŸÉÿ™Ÿàÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿπŸÉÿ≥Ÿä
- ÿßÿ±ŸÅÿ∂ ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑŸÖŸÇŸÑŸàÿ®ÿ© ÿ£Ÿà ÿßŸÑŸÖÿπŸÉŸàÿ≥ÿ© ÿ£Ÿà ÿßŸÑŸÖÿ™ÿØÿßÿÆŸÑÿ©
- ÿßÿ±ŸÅÿ∂ ÿßŸÑÿÆÿ∑Ÿàÿ∑ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖŸÉÿ≥ÿ±ÿ© ÿ£Ÿà ÿ∫Ÿäÿ± ÿßŸÑŸàÿßÿ∂ÿ≠ÿ© ÿ£Ÿà ÿßŸÑŸÖŸÇÿ∑ÿπÿ©
- ŸÅÿ≠ÿµ ÿØŸÇŸäŸÇ ŸÑŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ŸÉŸÑ ŸÉŸÑŸÖÿ© ÿπÿ±ÿ®Ÿäÿ© ŸÑŸáÿß ŸÖÿπŸÜŸâ ÿµÿ≠Ÿäÿ≠ ŸàŸÖŸÅŸáŸàŸÖ
- ÿßÿ±ŸÅÿ∂ ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑÿ™Ÿä ÿ™ÿ®ÿØŸà ŸàŸÉÿ£ŸÜŸáÿß ÿ™ÿ±ÿ¨ŸÖÿ© ÿ¢ŸÑŸäÿ© ÿÆÿßÿ∑ÿ¶ÿ©
- ÿßÿ±ŸÅÿ∂ ÿ£Ÿä ŸÜÿµ ÿπÿ±ÿ®Ÿä Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ±ŸÖŸàÿ≤ ÿ£Ÿà ÿ£ÿ≠ÿ±ŸÅ ÿ∫ÿ±Ÿäÿ®ÿ© ÿ£Ÿà ŸÖÿ¥ŸàŸáÿ©
- ŸÉŸÜ ÿµÿßÿ±ŸÖÿßŸã ÿ¨ÿØÿßŸã: ÿ•ÿ∞ÿß Ÿàÿ¨ÿØÿ™ ÿ£Ÿä ÿ¥ŸÉ ŸÅŸä ÿµÿ≠ÿ© ÿßŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿäÿå ÿßÿ±ŸÅÿ∂ ÿßŸÑÿµŸàÿ±ÿ© ŸÅŸàÿ±ÿßŸã

1. ÿßŸÑÿ™ŸàÿßŸÅŸÇ ŸÖÿπ ÿßŸÑŸÜÿµ ŸàÿßŸÑÿ≥ŸäÿßŸÇ:
- ŸáŸÑ ÿ™ÿ™ÿ∑ÿßÿ®ŸÇ ÿπŸÜÿßÿµÿ± ÿßŸÑÿµŸàÿ±ÿ© ŸÖÿπ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÜÿµÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿπŸÜÿßÿµÿ± ŸÖÿ∂ŸÑŸÑÿ© ÿ£Ÿà ŸÑÿß ÿπŸÑÿßŸÇÿ© ŸÑŸáÿß ÿ®ÿßŸÑÿ≥ŸäÿßŸÇÿü

2. ÿ≥ŸÑÿßŸÖÿ© ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑÿ®ÿµÿ±Ÿäÿ©:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ™ÿ¥ŸàŸáÿßÿ™ Ÿàÿßÿ∂ÿ≠ÿ© (ÿ£ŸäÿßÿØŸä ÿ≤ÿßÿ¶ÿØÿ©ÿå Ÿàÿ¨ŸàŸá ŸÖÿ¥ŸàŸáÿ©ÿå ÿ£ÿ±ÿ¨ŸÑ ÿ∫Ÿäÿ± ÿ∑ÿ®ŸäÿπŸäÿ©)ÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ£ÿÆÿ∑ÿßÿ° ŸÖŸÜÿ∑ŸÇŸäÿ© (ÿ∏ŸÑÿßŸÑ ÿ∫Ÿäÿ± ŸÖŸÜÿ∑ŸÇŸäÿ©ÿå ÿ£ÿ¥Ÿäÿßÿ° ŸÖÿπŸÑŸÇÿ©)ÿü

3. ÿßŸÑÿßŸÑÿ™ÿ≤ÿßŸÖ ÿ®ÿßŸÑŸÇŸäŸÖ ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿ©:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ±ŸÖŸàÿ≤ ÿØŸäŸÜŸäÿ© ŸÖÿÆÿßŸÑŸÅÿ© (ÿµŸÑŸäÿ®ÿå ÿ®Ÿàÿ∞ÿßÿå ŸÜÿ¨ŸÖÿ© ÿØÿßŸàŸàÿØ)ÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ™ŸÖÿßÿ´ŸäŸÑ ÿ£Ÿà ÿ±ŸÖŸàÿ≤ ÿ£ÿ≥ÿ∑Ÿàÿ±Ÿäÿ© ŸÖÿÆÿßŸÑŸÅÿ©ÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ŸÖÿ¥ÿßŸáÿØ ÿπÿ®ÿßÿØÿßÿ™ ÿ∫Ÿäÿ± ÿ•ÿ≥ŸÑÿßŸÖŸäÿ©ÿü

4. ÿßŸÑÿ≠ÿ¥ŸÖÿ© ŸàÿßŸÑŸÑÿ®ÿßÿ≥:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ŸÜÿ≥ÿßÿ° ÿ®ŸÖŸÑÿßÿ®ÿ≥ ŸÉÿßÿ¥ŸÅÿ©ÿü
- ŸáŸÑ ÿ™ÿ®ÿ±ÿ≤ ÿßŸÑÿµŸàÿ±ÿ© ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ¨ÿ≥ÿØ ÿ®ÿ¥ŸÉŸÑ ŸÖÿ´Ÿäÿ±ÿü

5. ÿ¨ŸàÿØÿ© ŸàÿØŸÇÿ© ÿßŸÑÿµŸàÿ±ÿ©:
- ŸáŸÑ ÿßŸÑÿµŸàÿ±ÿ© Ÿàÿßÿ∂ÿ≠ÿ© ŸàÿπÿßŸÑŸäÿ© ÿßŸÑÿØŸÇÿ©ÿü
- ŸáŸÑ ÿßŸÑÿ•ÿ∂ÿßÿ°ÿ© ŸàÿßŸÑÿ£ŸÑŸàÿßŸÜ ŸÖÿ™ŸÜÿßÿ≥ŸÇÿ©ÿü

6. ŸÖŸÜÿπ ÿßŸÑÿπŸÜŸÅ:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ŸÖÿ¥ÿßŸáÿØ ÿØŸÖŸàŸäÿ© ÿ£Ÿà ÿπŸÜŸÅÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ£ÿ≥ŸÑÿ≠ÿ© ŸÅŸä ÿ≥ŸäÿßŸÇ ÿ∫Ÿäÿ± ÿ¢ŸÖŸÜÿü

7. ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ≥Ÿäÿßÿ≥Ÿä:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ¥ÿÆÿµŸäÿßÿ™ ÿ≥Ÿäÿßÿ≥Ÿäÿ© ÿ¨ÿØŸÑŸäÿ©ÿü
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ±ŸÖŸàÿ≤ ÿ≥Ÿäÿßÿ≥Ÿäÿ© ÿ≠ÿ≥ÿßÿ≥ÿ©ÿü

8. ÿßŸÑÿ™ÿ∂ŸÑŸäŸÑ ÿßŸÑÿ®ÿµÿ±Ÿä:
- ŸáŸÑ ÿ™ÿ®ÿØŸà ÿßŸÑÿµŸàÿ±ÿ© ŸÖŸÅÿ®ÿ±ŸÉÿ© ÿ£Ÿà ŸÖÿ∂ŸÑŸÑÿ©ÿü
- ŸáŸÑ ÿ™Ÿàÿ≠Ÿä ÿ®ÿ≠ŸÇÿßÿ¶ŸÇ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©ÿü

9. ÿßŸÑÿ≠ŸÇŸàŸÇ ŸàÿßŸÑÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ¥ÿπÿßÿ±ÿßÿ™ ÿ£Ÿà ÿπŸÑÿßŸÖÿßÿ™ ÿ™ÿ¨ÿßÿ±Ÿäÿ© ŸÖÿ≠ŸÖŸäÿ©ÿü

10. ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖŸÇÿ≤ÿ≤:
- ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ŸÖŸÜÿßÿ∏ÿ± ŸÖŸÇÿ≤ÿ≤ÿ© ÿ£Ÿà ŸÖÿ±ŸÅŸàÿ∂ÿ©ÿü

11. ÿ≥Ÿäÿßÿ≥ÿßÿ™ ŸÅŸäÿ≥ÿ®ŸàŸÉ:
- ŸáŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖÿ™ŸàÿßŸÅŸÇ ŸÖÿπ ÿ≥Ÿäÿßÿ≥ÿßÿ™ ŸÅŸäÿ≥ÿ®ŸàŸÉÿü

**ÿ™ÿπŸÑŸäŸÖÿßÿ™ ŸÖŸáŸÖÿ© ÿ¨ÿØÿßŸã**:
- ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸáŸÜÿßŸÉ ÿ£Ÿä ŸÜÿµŸàÿµ ÿπÿ±ÿ®Ÿäÿ© ŸÅŸä ÿßŸÑÿµŸàÿ±ÿ©ÿå ŸÅÿ≠ÿµŸáÿß ÿ®ÿØŸÇÿ© ÿ¥ÿØŸäÿØÿ© ÿ¨ÿØÿßŸã
- ÿ•ÿ∞ÿß Ÿàÿ¨ÿØÿ™ ÿ£Ÿä ŸÉŸÑŸÖÿ© ÿπÿ±ÿ®Ÿäÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ© ÿ£Ÿà ŸÖÿ¥ŸàŸáÿ© ÿ£Ÿà ŸÑÿß ŸÖÿπŸÜŸâ ŸÑŸáÿßÿå ÿßÿ±ŸÅÿ∂ ÿßŸÑÿµŸàÿ±ÿ© ŸÅŸàÿ±ÿßŸã
- ŸÉŸÜ ÿµÿßÿ±ŸÖÿßŸã ÿ¨ÿØÿßŸã ŸÅŸä ŸÅÿ≠ÿµ ÿ¨ŸàÿØÿ© ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
- ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ŸÖÿ™ÿ£ŸÉÿØÿßŸã 100% ŸÖŸÜ ÿµÿ≠ÿ© ŸÉŸÑŸÖÿ© ÿπÿ±ÿ®Ÿäÿ©ÿå ÿßÿ±ŸÅÿ∂ ÿßŸÑÿµŸàÿ±ÿ©
- ÿ£ÿπÿ∑ ÿØÿ±ÿ¨ÿ© 0 ŸÑÿ£Ÿä ÿµŸàÿ±ÿ© ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÜÿµŸàÿµ ÿπÿ±ÿ®Ÿäÿ© ÿÆÿßÿ∑ÿ¶ÿ©

ŸÇŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿ®ÿ™ŸÜÿ≥ŸäŸÇ JSON ÿØŸÇŸäŸÇ:
{
  "isValid": true/false,
  "score": ÿ±ŸÇŸÖ ŸÖŸÜ 0-100,
  "violations": ["ŸÇÿßÿ¶ŸÖÿ© ÿ®ÿßŸÑŸÖÿÆÿßŸÑŸÅÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©"],
  "warnings": ["ŸÇÿßÿ¶ŸÖÿ© ÿ®ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™"],
  "recommendation": "ÿßŸÑÿ™ŸàÿµŸäÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©",
  "analysisDetails": {
    "contentAlignment": true/false,
    "visualIntegrity": true/false,
    "islamicCompliance": true/false,
    "modesty": true/false,
    "imageQuality": true/false,
    "textQuality": true/false,
    "violenceCheck": true/false,
    "politicalContent": true/false,
    "misinformation": true/false,
    "copyright": true/false,
    "disgusting": true/false,
    "facebookPolicy": true/false
  },
  "imageDescription": "ŸàÿµŸÅ ŸÖÿÆÿ™ÿµÿ± ŸÑŸÑÿµŸàÿ±ÿ©",
  "confidence": ÿ±ŸÇŸÖ ŸÖŸÜ 0-100
}

ŸÉŸÜ ÿµÿßÿ±ŸÖÿßŸã ŸÅŸä ÿßŸÑÿ™ŸÇŸäŸäŸÖ Ÿàÿ£ÿπÿ∑ ÿØÿ±ÿ¨ÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ŸÑŸÑÿµŸàÿ± ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£Ÿä ŸÖÿÆÿßŸÑŸÅÿßÿ™.`;

    // Send request to Gemini API
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [
              {
                text: validationPrompt
              },
              {
                inlineData: {
                  mimeType: imageMimeType,
                  data: imageData
                }
              }
            ]
          }],
          generationConfig: {
            temperature: 0.1, // Very low for consistent validation
            topK: 20,
            topP: 0.7,
            maxOutputTokens: 2048,
          }
        })
      }
    );

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Gemini API error:', errorData);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0]) {
      throw new Error('No validation result from Gemini API');
    }
    
    const validationText = data.candidates[0].content.parts[0].text;
    console.log('ü§ñ Raw Gemini validation response:', validationText);

    // Parse JSON from response
    let validationResult: ValidationResult;
    try {
      const jsonMatch = validationText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        
        // Ensure all required fields exist
        validationResult = {
          isValid: parsed.isValid || false,
          score: Math.max(0, Math.min(100, parsed.score || 0)),
          violations: Array.isArray(parsed.violations) ? parsed.violations : [],
          warnings: Array.isArray(parsed.warnings) ? parsed.warnings : [],
          recommendation: parsed.recommendation || "ŸäŸèŸÜÿµÿ≠ ÿ®ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿµŸàÿ±ÿ© ŸÇÿ®ŸÑ ÿßŸÑŸÜÿ¥ÿ±",
          analysisDetails: {
            contentAlignment: parsed.analysisDetails?.contentAlignment || false,
            visualIntegrity: parsed.analysisDetails?.visualIntegrity || false,
            islamicCompliance: parsed.analysisDetails?.islamicCompliance || false,
            modesty: parsed.analysisDetails?.modesty || false,
            imageQuality: parsed.analysisDetails?.imageQuality || false,
            textQuality: parsed.analysisDetails?.textQuality || false,
            violenceCheck: parsed.analysisDetails?.violenceCheck || false,
            politicalContent: parsed.analysisDetails?.politicalContent || false,
            misinformation: parsed.analysisDetails?.misinformation || false,
            copyright: parsed.analysisDetails?.copyright || false,
            disgusting: parsed.analysisDetails?.disgusting || false,
            facebookPolicy: parsed.analysisDetails?.facebookPolicy || false,
          },
          imageDescription: parsed.imageDescription || "ÿ™ŸÖ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ©",
          confidence: Math.max(0, Math.min(100, parsed.confidence || 70))
        };

        // Additional logic: mark as invalid if score is too low
        if (validationResult.score < 70) {
          validationResult.isValid = false;
        }

        // Add automatic violations based on failed checks
        if (!validationResult.analysisDetails.islamicCompliance) {
          validationResult.violations.push("ŸÖÿÆÿßŸÑŸÅÿ© ŸÑŸÑŸÇŸäŸÖ ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿ©");
        }
        if (!validationResult.analysisDetails.modesty) {
          validationResult.violations.push("ŸÖÿÆÿßŸÑŸÅÿ© ŸÑŸÖÿπÿßŸäŸäÿ± ÿßŸÑÿ≠ÿ¥ŸÖÿ©");
        }
        if (!validationResult.analysisDetails.facebookPolicy) {
          validationResult.violations.push("ŸÖÿÆÿßŸÑŸÅÿ© ŸÑÿ≥Ÿäÿßÿ≥ÿßÿ™ ŸÅŸäÿ≥ÿ®ŸàŸÉ");
        }

      } else {
        // Fallback if JSON parsing fails
        validationResult = {
          isValid: false,
          score: 30,
          violations: ["ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠"],
          warnings: ["ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿ®ÿßŸÑÿ¥ŸÉŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®"],
          recommendation: "ŸäŸèŸÜÿµÿ≠ ÿ®ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿµŸàÿ±ÿ© ŸäÿØŸàŸäÿßŸã ŸÇÿ®ŸÑ ÿßŸÑŸÜÿ¥ÿ±",
          analysisDetails: {
            contentAlignment: false,
            visualIntegrity: false,
            islamicCompliance: false,
            modesty: false,
            imageQuality: false,
            textQuality: false,
            violenceCheck: false,
            politicalContent: false,
            misinformation: false,
            copyright: false,
            disgusting: false,
            facebookPolicy: false,
          },
          imageDescription: "ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ©",
          confidence: 30
        };
      }
    } catch (parseError) {
      console.error('‚ùå JSON parsing error:', parseError);
      validationResult = {
        isValid: false,
        score: 0,
        violations: ["ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿ≠ÿµ"],
        warnings: ["ŸÅÿ¥ŸÑ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ"],
        recommendation: "Ÿäÿ¨ÿ® ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿµŸàÿ±ÿ© ŸäÿØŸàŸäÿßŸã",
        analysisDetails: {
          contentAlignment: false,
          visualIntegrity: false,
          islamicCompliance: false,
          modesty: false,
          imageQuality: false,
          textQuality: false,
          violenceCheck: false,
          politicalContent: false,
          misinformation: false,
          copyright: false,
          disgusting: false,
          facebookPolicy: false,
        },
        imageDescription: "ŸÅÿ¥ŸÑ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ",
        confidence: 0
      };
    }

    console.log('‚úÖ Final validation result:', JSON.stringify({
      isValid: validationResult.isValid,
      score: validationResult.score,
      violations: validationResult.violations.length,
      confidence: validationResult.confidence
    }));

    return new Response(JSON.stringify(validationResult), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in comprehensive-image-validator function:', error);
    
    const errorResult: ValidationResult = {
      isValid: false,
      score: 0,
      violations: [`ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÜÿ∏ÿßŸÖ: ${error.message}`],
      warnings: ["ÿ™ÿπÿ∞ÿ± ÿ•ÿ¨ÿ±ÿßÿ° ÿßŸÑŸÅÿ≠ÿµ ÿßŸÑÿ¥ÿßŸÖŸÑ"],
      recommendation: "Ÿäÿ¨ÿ® ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿµŸàÿ±ÿ© ŸäÿØŸàŸäÿßŸã ŸÇÿ®ŸÑ ÿßŸÑŸÜÿ¥ÿ±",
      analysisDetails: {
        contentAlignment: false,
        visualIntegrity: false,
        islamicCompliance: false,
        modesty: false,
        imageQuality: false,
        textQuality: false,
        violenceCheck: false,
        politicalContent: false,
        misinformation: false,
        copyright: false,
        disgusting: false,
        facebookPolicy: false,
      },
      imageDescription: "ŸÅÿ¥ŸÑ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ",
      confidence: 0
    };

    return new Response(JSON.stringify(errorResult), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, 
      status: 500 
    });
  }
});