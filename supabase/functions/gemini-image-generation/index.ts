import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'
import { createGeminiKeyManager } from '../_shared/apiKeyRotation.ts'

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { prompt, width = 1024, height = 1024 } = await req.json()

    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Missing prompt parameter' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    console.log('🎨 بدء توليد الصورة باستخدام Gemini API مع نظام دوران المفاتيح...')

    // إنشاء مدير دوران المفاتيح
    const keyManager = createGeminiKeyManager()
    console.log(`📊 إحصائيات المفاتيح:`, keyManager.getStats())

    // Prepare the request body for Gemini Image Generation API
    const requestBody = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048,
        responseModalities: ["TEXT", "IMAGE"]
      }
    }

    // Call Gemini Image Generation API with key rotation
    const response = await keyManager.makeGeminiRequest(
      'gemini-2.0-flash-preview-image-generation',
      requestBody
    )

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Gemini API error:', errorText)
      throw new Error(`Gemini API error: ${response.status} ${errorText}`)
    }

    const data = await response.json()
    console.log('Gemini API response received')

    // Find the image part in the response
    const candidate = data.candidates?.[0]
    if (!candidate || !candidate.content || !candidate.content.parts) {
      throw new Error('No content generated by Gemini API')
    }

    let imageData = null
    let textResponse = null

    // Extract image and text from response parts
    for (const part of candidate.content.parts) {
      if (part.inlineData && part.inlineData.data) {
        imageData = part.inlineData.data
      } else if (part.text) {
        textResponse = part.text
      }
    }

    if (!imageData) {
      throw new Error('No image generated by Gemini API')
    }

    // Convert base64 image to a data URL
    const mimeType = candidate.content.parts.find(p => p.inlineData)?.inlineData?.mimeType || 'image/png'
    const imageUrl = `data:${mimeType};base64,${imageData}`

    // Return the generated image data
    return new Response(
      JSON.stringify({ 
        imageURL: imageUrl,
        imageData: imageData,
        mimeType: mimeType,
        textResponse: textResponse,
        prompt: prompt,
        model: 'gemini-2.0-flash-preview-image-generation'
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error generating image with Gemini:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to generate image with Gemini',
        details: 'Please check your Gemini API key and try again'
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})