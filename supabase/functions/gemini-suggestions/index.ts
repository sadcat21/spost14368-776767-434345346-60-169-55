import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createGeminiKeyManager } from '../_shared/apiKeyRotation.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const requestData = await req.json();
    const { type, settings, description, prompt: userPrompt, topic } = requestData;
    
    console.log(`๐ก ุจุฏุก ุชูููุฏ ุงูุงูุชุฑุงุญุงุช - ุงูููุน: ${type}`)
    
    // ุฅูุดุงุก ูุฏูุฑ ุฏูุฑุงู ุงูููุงุชูุญ
    const keyManager = createGeminiKeyManager()
    console.log(`๐ ุฅุญุตุงุฆูุงุช ุงูููุงุชูุญ:`, keyManager.getStats())

    let prompt = '';
    
    if (type === 'suggest_name_description') {
      // ุงูุชุฑุงุญ ุงุณู ููุตู ูููููุฐุฌ ุญุณุจ ุงูุฅุนุฏุงุฏุงุช
      prompt = `ุฃูุช ุฎุจูุฑ ูู ุงูุชุตููู ูุชุฏุฑุฌุงุช ุงูุฃููุงู. ุจูุงุกู ุนูู ุฅุนุฏุงุฏุงุช ุงูุชุฏุฑุฌ ุงูุชุงููุฉุ ุงูุชุฑุญ ุงุณูุงู ููุงุณุจุงู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ููุตูุงู ูุตูุฑุงู ููุฐุง ุงููููุฐุฌ:

ุฅุนุฏุงุฏุงุช ุงูุชุฏุฑุฌ:
- ููุน ุงูุชุฏุฑุฌ: ${settings.gradient_type === 'linear' ? 'ุฎุทู' : settings.gradient_type === 'radial' ? 'ุฏุงุฆุฑู' : 'ูุฎุฑูุทู'}
- ุงูููู ุงูุฃูู: ${settings.first_color} (ุดูุงููุฉ: ${settings.first_color_opacity}%)
- ุงูููู ุงูุซุงูู: ${settings.second_color} (ุดูุงููุฉ: ${settings.second_color_opacity}%)
- ุฒุงููุฉ ุงูุชุฏุฑุฌ: ${settings.gradient_angle}ยฐ
- ุงูุดูุงููุฉ ุงูุนุงูุฉ: ${settings.global_opacity}%
- ุงุณุชุฎุฏุงู ุงูุชูููุงุช ุงูุญุงุฏุฉ: ${settings.use_sharp_stops ? 'ูุนู' : 'ูุง'}

ูุฑุฌู ุชูุฏูู:
1. ุงุณู ููุงุณุจ ูุฌุฐุงุจ ูููููุฐุฌ (ูุง ูุฒูุฏ ุนู 30 ุญุฑู)
2. ูุตู ูุตูุฑ ูุดุฑุญ ุฎุตุงุฆุต ูุฐุง ุงูุชุฏุฑุฌ (ูุง ูุฒูุฏ ุนู 100 ุญุฑู)

ูุฏู ุงูุงุฌุงุจุฉ ุจุตูุบุฉ JSON:
{
  "name": "ุงูุงุณู ุงูููุชุฑุญ",
  "description": "ุงููุตู ุงูููุชุฑุญ"
}`;

    } else if (type === 'suggest_smart_settings') {
      // ุงูุชุฑุงุญ ุฅุนุฏุงุฏุงุช ุฐููุฉ
      const context = description || 'ุชุฏุฑุฌ ุนุงู ููุทุจูุฉ ุงูุนูููุฉ';
      prompt = `ุฃูุช ุฎุจูุฑ ูู ุงูุชุตููู ูุชุฏุฑุฌุงุช ุงูุฃููุงู. ุงูุชุฑุญ ุฅุนุฏุงุฏุงุช ุชุฏุฑุฌ ููุงุณุจุฉ ูุฌูููุฉ ููุณูุงู ุงูุชุงูู: "${context}"

ูุฑุฌู ุงูุชุฑุงุญ ุฅุนุฏุงุฏุงุช ุชุฏุฑุฌ ุชุดูู:
- ููุน ุงูุชุฏุฑุฌ (linear, radial, conic)
- ููููู ุฃุณุงุณููู ูุน ููุฏุงุช hex
- ุฒุงููุฉ ุงูุชุฏุฑุฌ
- ูุณุจ ุงูุดูุงููุฉ
- ููุงุถุน ุงูุฃููุงู
- ุฅุนุฏุงุฏุงุช ุฃุฎุฑู ููุงุณุจุฉ

ูุฏู ุงูุงุฌุงุจุฉ ุจุตูุบุฉ JSON ูุน ุงูุชูุณูุฑ:
{
  "settings": {
    "gradient_type": "ููุน ุงูุชุฏุฑุฌ",
    "first_color": "#ููุฏ_ุงูููู_ุงูุฃูู", 
    "first_color_opacity": ุนุฏุฏ_ุงูุดูุงููุฉ,
    "first_color_position": ููุถุน_ุงูููู_ุงูุฃูู,
    "second_color": "#ููุฏ_ุงูููู_ุงูุซุงูู",
    "second_color_opacity": ุนุฏุฏ_ุงูุดูุงููุฉ,
    "second_color_position": ููุถุน_ุงูููู_ุงูุซุงูู,
    "gradient_angle": ุฒุงููุฉ_ุงูุชุฏุฑุฌ,
    "center_x": 50,
    "center_y": 50,
    "gradient_size": 100,
    "use_sharp_stops": true_or_false,
    "global_opacity": ุงูุดูุงููุฉ_ุงูุนุงูุฉ,
    "blend_mode": "normal"
  },
  "explanation": "ุชูุณูุฑ ุณุจุจ ุงุฎุชูุงุฑ ูุฐู ุงูุฅุนุฏุงุฏุงุช"
}`;
    } else if (type === 'generate_smart_prompt') {
      // ุชูููุฏ ุจุฑููุช ุฐูู ูุฎุตุต
      prompt = userPrompt || `ุฃูุช ุฎุจูุฑ ูู ุชุตููู ุงูุจุฑููุชุงุช ูุชูููุฏ ุงูุตูุฑ. ูู ุจุฅูุดุงุก ุจุฑููุช ุงุญุชุฑุงูู ููุตู ุญูู ููุถูุน "${topic}".`;
    }

    // ุงุณุชุฎุฏุงู ูุธุงู ุฏูุฑุงู ุงูููุงุชูุญ
    const response = await keyManager.makeGeminiRequest(
      'gemini-pro',
      {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const generatedText = data.candidates[0].content.parts[0].text;
    
    // ูุญุงููุฉ ุงุณุชุฎุฑุงุฌ JSON ูู ุงููุต
    let result;
    try {
      const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        result = JSON.parse(jsonMatch[0]);
      } else {
        result = { text: generatedText };
      }
    } catch (e) {
      result = { text: generatedText };
    }

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in gemini-suggestions function:', error);
    return new Response(
      JSON.stringify({ error: 'An unexpected error occurred', details: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});