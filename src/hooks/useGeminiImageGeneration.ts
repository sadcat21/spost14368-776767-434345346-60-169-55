import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import { supabase } from "@/integrations/supabase/client";
import { createGeminiKeyManager } from '@/utils/apiKeyRotationManager';
import { useGeminiImageAnalysis } from './useGeminiImageAnalysis';

interface ImageGenerationParams {
  prompt: string;
  model?: string;
  temperature?: number;
  maxOutputTokens?: number;
  apiKey?: string;
}

interface ImageEditingParams {
  prompt: string;
  imageFile: File;
  model?: string;
  temperature?: number;
  maxOutputTokens?: number;
  apiKey?: string;
}

interface GeneratedImageResult {
  imageUrl: string;
  imageData: string; // base64
  description?: string;
  mimeType: string;
}

export const useGeminiImageGeneration = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<GeneratedImageResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // استخدام hook تحليل الصور لتوليد وصف ذكي
  const { generateImageDescription } = useGeminiImageAnalysis();

  // تحويل File إلى base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result as string;
        // إزالة data:image/...;base64, من البداية
        const base64Data = base64.split(',')[1];
        resolve(base64Data);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // توليد صورة من النص
  const generateImage = useCallback(async (params: ImageGenerationParams): Promise<GeneratedImageResult | null> => {
    setIsGenerating(true);
    setError(null);
    
    try {
      console.log('🎨 Starting image generation with Gemini...');
      
      // إنشاء مدير دوران المفاتيح
      const keyManager = createGeminiKeyManager();
      console.log('🔑 استخدام نظام دوران المفاتيح التلقائي');
      
      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: `Generate a high-quality, detailed image: ${params.prompt}. Professional composition, high resolution, vibrant colors.`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: params.temperature || 0.7,
          maxOutputTokens: params.maxOutputTokens || 2048,
          topP: 0.95,
          topK: 40,
          responseModalities: ["TEXT", "IMAGE"]
        }
      };

      // استخدام مدير دوران المفاتيح لتنفيذ الطلب
      const response = await keyManager.makeRequest({
        url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent`,
        apiKeyParam: 'key',
        options: {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Gemini API error:', errorText);
        throw new Error(`خطأ من Gemini API: ${response.status} - ${errorText}`);
      }

      const apiData = await response.json();
      console.log('Gemini API response received');

      // Find the image part in the response
      const candidate = apiData.candidates?.[0];
      if (!candidate || !candidate.content || !candidate.content.parts) {
        throw new Error('No content generated by Gemini API');
      }

      let extractedImageData = null;
      let textResponse = null;

      // Extract image and text from response parts
      for (const part of candidate.content.parts) {
        if (part.inlineData && part.inlineData.data) {
          extractedImageData = part.inlineData.data;
        } else if (part.text) {
          textResponse = part.text;
        }
      }

      if (!extractedImageData) {
        throw new Error('No image generated by Gemini API');
      }

      // Convert base64 image to a data URL
      const resultMimeType = candidate.content.parts.find(p => p.inlineData)?.inlineData?.mimeType || 'image/png';
      const resultImageUrl = `data:${resultMimeType};base64,${extractedImageData}`;

      // توليد وصف ذكي للصورة باستخدام Gemini Vision
      console.log('👁️ توليد وصف ذكي للصورة المولدة...');
      const intelligentDescription = await generateImageDescription(extractedImageData, resultMimeType);

      const finalResult: GeneratedImageResult = {
        imageUrl: resultImageUrl,
        imageData: extractedImageData,
        description: intelligentDescription || textResponse || 'صورة مولدة بواسطة الذكاء الاصطناعي',
        mimeType: resultMimeType
      };

      setGeneratedImage(finalResult);
      console.log('✅ تم توليد الصورة بنجاح مع وصف ذكي');
      toast.success('تم توليد الصورة مع وصف ذكي بنجاح!');
      return finalResult;

    } catch (error) {
      console.error('❌ خطأ في توليد الصورة:', error);
      const errorMessage = error instanceof Error ? error.message : 'حدث خطأ في توليد الصورة';
      setError(errorMessage);
      toast.error(errorMessage);
      return null;
    } finally {
      setIsGenerating(false);
    }
  }, []);

  // تعديل صورة موجودة
  const editImage = useCallback(async (params: ImageEditingParams): Promise<GeneratedImageResult | null> => {
    setIsGenerating(true);
    setError(null);
    
    try {
      console.log('🖼️ Starting image editing with Gemini...');
      
      // إنشاء مدير دوران المفاتيح
      const keyManager = createGeminiKeyManager();
      console.log('🔑 استخدام نظام دوران المفاتيح التلقائي لتعديل الصور');
      
      // تحويل الصورة إلى base64
      const base64Image = await fileToBase64(params.imageFile);
      
      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: `Edit this image: ${params.prompt}`
              },
              {
                inlineData: {
                  mimeType: params.imageFile.type,
                  data: base64Image
                }
              }
            ]
          }
        ],
        generationConfig: {
          temperature: params.temperature || 0.8,
          maxOutputTokens: params.maxOutputTokens || 1000,
          topP: 0.95,
          topK: 40,
          responseModalities: ["TEXT", "IMAGE"]
        }
      };

      // استخدام مدير دوران المفاتيح لتنفيذ الطلب
      const response = await keyManager.makeRequest({
        url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent`,
        apiKeyParam: 'key',
        options: {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Gemini API error:', errorText);
        throw new Error(`خطأ من Gemini API: ${response.status} - ${errorText}`);
      }

      const apiData = await response.json();
      console.log('Gemini API response received');

      // Find the image part in the response
      const candidate = apiData.candidates?.[0];
      if (!candidate || !candidate.content || !candidate.content.parts) {
        throw new Error('No content generated by Gemini API');
      }

      let extractedImageData = null;
      let textResponse = null;

      // Extract image and text from response parts
      for (const part of candidate.content.parts) {
        if (part.inlineData && part.inlineData.data) {
          extractedImageData = part.inlineData.data;
        } else if (part.text) {
          textResponse = part.text;
        }
      }

      if (!extractedImageData) {
        throw new Error('No image generated by Gemini API');
      }

      // Convert base64 image to a data URL
      const resultMimeType = candidate.content.parts.find(p => p.inlineData)?.inlineData?.mimeType || 'image/png';
      const resultImageUrl = `data:${resultMimeType};base64,${extractedImageData}`;

      // توليد وصف ذكي للصورة المعدلة باستخدام Gemini Vision
      console.log('👁️ توليد وصف ذكي للصورة المعدلة...');
      const intelligentDescription = await generateImageDescription(extractedImageData, resultMimeType);

      const finalResult: GeneratedImageResult = {
        imageUrl: resultImageUrl,
        imageData: extractedImageData,
        description: intelligentDescription || textResponse || 'صورة معدلة بواسطة الذكاء الاصطناعي',
        mimeType: resultMimeType
      };

      setGeneratedImage(finalResult);
      console.log('✅ تم تعديل الصورة بنجاح مع وصف ذكي');
      toast.success('تم تعديل الصورة مع وصف ذكي بنجاح!');
      return finalResult;

    } catch (error) {
      console.error('❌ خطأ في تعديل الصورة:', error);
      const errorMessage = error instanceof Error ? error.message : 'حدث خطأ في تعديل الصورة';
      setError(errorMessage);
      toast.error(errorMessage);
      return null;
    } finally {
      setIsGenerating(false);
    }
  }, []);

  const resetImage = useCallback(() => {
    if (generatedImage?.imageUrl) {
      URL.revokeObjectURL(generatedImage.imageUrl);
    }
    setGeneratedImage(null);
    setError(null);
  }, [generatedImage]);

  return {
    generateImage,
    editImage,
    resetImage,
    isGenerating,
    generatedImage,
    error
  };
};